import express from 'express'
import dotenv from 'dotenv'
import path from 'path'
import { fileURLToPath } from 'url'
import cors from 'cors'
import { createClient } from '@supabase/supabase-js'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è .env
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
dotenv.config({ path: path.join(__dirname, '.env') })

// –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===')
console.log('Supabase URL:', process.env.SUPABASE_URL || '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
console.log('Supabase Key:', process.env.SUPABASE_KEY ? '‚úîÔ∏è (—Å–∫—Ä—ã—Ç–æ)' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
let supabase
try {
  supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_KEY,
    {
      auth: {
        persistSession: false,
        autoRefreshToken: false
      }
    }
  )
  console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', err)
  process.exit(1)
}

const app = express()

// –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π CORS –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.use(cors({
  origin: '*',
  methods: '*'
}))

app.use(express.json())

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.path}`)
  next()
})

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/api/hello', (req, res) => {
  res.json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!' })
})

// –†–æ—É—Ç –¥–ª—è –∫—É—Ä—Å–æ–≤ (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
app.get('/api/courses', async (req, res) => {
  console.log('–ó–∞–ø—Ä–æ—Å –∫ /api/courses –Ω–∞—á–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫—É')
  
  try {
    const { data, error } = await supabase
      .from('courses')
      .select('*')
      .limit(10)

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Supabase:', { data, error })

    if (error) {
      console.error('–û—à–∏–±–∫–∞ Supabase:', error)
      return res.status(500).json({ 
        error: 'Database Error',
        details: error.message 
      })
    }

    if (!data || data.length === 0) {
      console.warn('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∫—É—Ä—Å–æ–≤')
      return res.status(200).json([])
    }

    res.json(data)
  } catch (err) {
    console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err)
    res.status(500).json({ 
      error: 'Internal Server Error',
      details: err.message 
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  console.warn(`–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.path}`)
  res.status(404).json({ message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' })
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5174
app.listen(PORT, () => {
  console.log(`\nüöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`)
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:')
  console.log(`- GET /api/hello`)
  console.log(`- GET /api/courses\n`)
})